Terminales no usados en la gramática

   TAB
   AND
   OR


Gramática

    0 $accept: lenguajeP $end

    1 lenguajeP: lenguajeP line
    2          | %empty

    3 line: init
    4     | assign
    5     | show
    6     | ifClause
    7     | fromClause
    8     | initFunction
    9     | foreachClause
   10     | returnClause
   11     | function

   12 init: initNum
   13     | initText
   14     | initList

   15 initNum: NUM VARNAME asignator expr

   16 initText: TEXT VARNAME asignator expr

   17 asignator: IS
   18          | '='

   19 @1: %empty

   20 initList: LIST NUM VARNAME @1 asignator numList

   21 $@2: %empty

   22 numList: expr $@2 ',' numList
   23        | expr

   24 assign: VARNAME asignator expr
   25       | VARNAME OPEN_BRACKET expr CLOSE_BRACKET asignator expr

   26 expr: expr PLUS expr
   27     | expr MINUS expr
   28     | expr TIMES expr
   29     | expr DIVIDED_BY expr
   30     | expr MOD expr
   31     | OPEN_PAREN expr CLOSE_PAREN
   32     | listAccess
   33     | function
   34     | VARNAME
   35     | INT
   36     | FLOAT
   37     | STRING

   38 show: SHOW expr
   39     | SHOW

   40 @3: %empty

   41 $@4: %empty

   42 ifClause: IF expr negation comparator expr THEN @3 lenguajeP DONE $@4

   43 negation: NOT
   44         | %empty

   45 comparator: GREATER
   46           | LOWER
   47           | IS
   48           | GEQUALS
   49           | LEQUALS
   50           | EQUALS
   51           | NOT_EQUALS

   52 @5: %empty

   53 $@6: %empty

   54 fromClause: FROM expr TO expr @5 DO lenguajeP $@6 DONE

   55 @7: %empty

   56 $@8: %empty

   57 foreachClause: FOREACH VARNAME IN expr @7 DO lenguajeP $@8 DONE

   58 listAccess: VARNAME OPEN_BRACKET expr CLOSE_BRACKET

   59 @9: %empty

   60 $@10: %empty

   61 $@11: %empty

   62 initFunction: FUNC VARNAME @9 OPEN_PAREN funcParam CLOSE_PAREN $@10 lenguajeP $@11 ENDFUNC

   63 $@12: %empty

   64 funcParam: VARNAME $@12 ',' funcParam
   65          | VARNAME

   66 @13: %empty

   67 $@14: %empty

   68 function: VARNAME OPEN_PAREN @13 assignParams $@14 CLOSE_PAREN

   69 $@15: %empty

   70 assignParams: expr $@15 ',' assignParams
   71             | expr

   72 returnClause: RETURN expr


Terminales con las reglas donde aparecen

$end (0) 0
',' (44) 22 64 70
'=' (61) 18
error (256)
TEXT (258) 16
NUM (259) 15 20
LIST (260) 20
PLUS (261) 26
MINUS (262) 27
TIMES (263) 28
DIVIDED_BY (264) 29
MOD (265) 30
INT (266) 35
FLOAT (267) 36
VARNAME (268) 15 16 20 24 25 34 57 58 62 64 65 68
STRING (269) 37
IS (270) 17 47
IF (271) 42
THEN (272) 42
FROM (273) 54
TO (274) 54
DO (275) 54 57
DONE (276) 42 54 57
ENDFUNC (277) 62
SHOW (278) 38 39
TAB (279)
NOT (280) 43
GREATER (281) 45
LOWER (282) 46
GEQUALS (283) 48
LEQUALS (284) 49
EQUALS (285) 50
NOT_EQUALS (286) 51
AND (287)
OR (288)
FOREACH (289) 57
IN (290) 57
FUNC (291) 62
RETURN (292) 72
OPEN_BRACKET (293) 25 58
CLOSE_BRACKET (294) 25 58
OPEN_PAREN (295) 31 62 68
CLOSE_PAREN (296) 31 62 68


No terminales con las reglas donde aparecen

$accept (44)
    en la izquierda: 0
lenguajeP (45)
    en la izquierda: 1 2, en la derecha: 0 1 42 54 57 62
line (46)
    en la izquierda: 3 4 5 6 7 8 9 10 11, en la derecha: 1
init (47)
    en la izquierda: 12 13 14, en la derecha: 3
initNum (48)
    en la izquierda: 15, en la derecha: 12
initText (49)
    en la izquierda: 16, en la derecha: 13
asignator (50)
    en la izquierda: 17 18, en la derecha: 15 16 20 24 25
initList (51)
    en la izquierda: 20, en la derecha: 14
@1 (52)
    en la izquierda: 19, en la derecha: 20
numList (53)
    en la izquierda: 22 23, en la derecha: 20 22
$@2 (54)
    en la izquierda: 21, en la derecha: 22
assign (55)
    en la izquierda: 24 25, en la derecha: 4
expr (56)
    en la izquierda: 26 27 28 29 30 31 32 33 34 35 36 37, en la derecha:
    15 16 22 23 24 25 26 27 28 29 30 31 38 42 54 57 58 70 71 72
show (57)
    en la izquierda: 38 39, en la derecha: 5
ifClause (58)
    en la izquierda: 42, en la derecha: 6
@3 (59)
    en la izquierda: 40, en la derecha: 42
$@4 (60)
    en la izquierda: 41, en la derecha: 42
negation (61)
    en la izquierda: 43 44, en la derecha: 42
comparator (62)
    en la izquierda: 45 46 47 48 49 50 51, en la derecha: 42
fromClause (63)
    en la izquierda: 54, en la derecha: 7
@5 (64)
    en la izquierda: 52, en la derecha: 54
$@6 (65)
    en la izquierda: 53, en la derecha: 54
foreachClause (66)
    en la izquierda: 57, en la derecha: 9
@7 (67)
    en la izquierda: 55, en la derecha: 57
$@8 (68)
    en la izquierda: 56, en la derecha: 57
listAccess (69)
    en la izquierda: 58, en la derecha: 32
initFunction (70)
    en la izquierda: 62, en la derecha: 8
@9 (71)
    en la izquierda: 59, en la derecha: 62
$@10 (72)
    en la izquierda: 60, en la derecha: 62
$@11 (73)
    en la izquierda: 61, en la derecha: 62
funcParam (74)
    en la izquierda: 64 65, en la derecha: 62 64
$@12 (75)
    en la izquierda: 63, en la derecha: 64
function (76)
    en la izquierda: 68, en la derecha: 11 33
@13 (77)
    en la izquierda: 66, en la derecha: 68
$@14 (78)
    en la izquierda: 67, en la derecha: 68
assignParams (79)
    en la izquierda: 70 71, en la derecha: 68 70
$@15 (80)
    en la izquierda: 69, en la derecha: 70
returnClause (81)
    en la izquierda: 72, en la derecha: 10


Estado 0

    0 $accept: . lenguajeP $end

    $default  reduce usando la regla 2 (lenguajeP)

    lenguajeP  ir al estado 1


Estado 1

    0 $accept: lenguajeP . $end
    1 lenguajeP: lenguajeP . line

    $end     desplazar e ir al estado 2
    TEXT     desplazar e ir al estado 3
    NUM      desplazar e ir al estado 4
    LIST     desplazar e ir al estado 5
    VARNAME  desplazar e ir al estado 6
    IF       desplazar e ir al estado 7
    FROM     desplazar e ir al estado 8
    SHOW     desplazar e ir al estado 9
    FOREACH  desplazar e ir al estado 10
    FUNC     desplazar e ir al estado 11
    RETURN   desplazar e ir al estado 12

    line           ir al estado 13
    init           ir al estado 14
    initNum        ir al estado 15
    initText       ir al estado 16
    initList       ir al estado 17
    assign         ir al estado 18
    show           ir al estado 19
    ifClause       ir al estado 20
    fromClause     ir al estado 21
    foreachClause  ir al estado 22
    initFunction   ir al estado 23
    function       ir al estado 24
    returnClause   ir al estado 25


Estado 2

    0 $accept: lenguajeP $end .

    $default  aceptar


Estado 3

   16 initText: TEXT . VARNAME asignator expr

    VARNAME  desplazar e ir al estado 26


Estado 4

   15 initNum: NUM . VARNAME asignator expr

    VARNAME  desplazar e ir al estado 27


Estado 5

   20 initList: LIST . NUM VARNAME @1 asignator numList

    NUM  desplazar e ir al estado 28


Estado 6

   24 assign: VARNAME . asignator expr
   25       | VARNAME . OPEN_BRACKET expr CLOSE_BRACKET asignator expr
   68 function: VARNAME . OPEN_PAREN @13 assignParams $@14 CLOSE_PAREN

    IS            desplazar e ir al estado 29
    OPEN_BRACKET  desplazar e ir al estado 30
    OPEN_PAREN    desplazar e ir al estado 31
    '='           desplazar e ir al estado 32

    asignator  ir al estado 33


Estado 7

   42 ifClause: IF . expr negation comparator expr THEN @3 lenguajeP DONE $@4

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 39
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 8

   54 fromClause: FROM . expr TO expr @5 DO lenguajeP $@6 DONE

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 42
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 9

   38 show: SHOW . expr
   39     | SHOW .

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    $default  reduce usando la regla 39 (show)

    expr        ir al estado 43
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 10

   57 foreachClause: FOREACH . VARNAME IN expr @7 DO lenguajeP $@8 DONE

    VARNAME  desplazar e ir al estado 44


Estado 11

   62 initFunction: FUNC . VARNAME @9 OPEN_PAREN funcParam CLOSE_PAREN $@10 lenguajeP $@11 ENDFUNC

    VARNAME  desplazar e ir al estado 45


Estado 12

   72 returnClause: RETURN . expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 46
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 13

    1 lenguajeP: lenguajeP line .

    $default  reduce usando la regla 1 (lenguajeP)


Estado 14

    3 line: init .

    $default  reduce usando la regla 3 (line)


Estado 15

   12 init: initNum .

    $default  reduce usando la regla 12 (init)


Estado 16

   13 init: initText .

    $default  reduce usando la regla 13 (init)


Estado 17

   14 init: initList .

    $default  reduce usando la regla 14 (init)


Estado 18

    4 line: assign .

    $default  reduce usando la regla 4 (line)


Estado 19

    5 line: show .

    $default  reduce usando la regla 5 (line)


Estado 20

    6 line: ifClause .

    $default  reduce usando la regla 6 (line)


Estado 21

    7 line: fromClause .

    $default  reduce usando la regla 7 (line)


Estado 22

    9 line: foreachClause .

    $default  reduce usando la regla 9 (line)


Estado 23

    8 line: initFunction .

    $default  reduce usando la regla 8 (line)


Estado 24

   11 line: function .

    $default  reduce usando la regla 11 (line)


Estado 25

   10 line: returnClause .

    $default  reduce usando la regla 10 (line)


Estado 26

   16 initText: TEXT VARNAME . asignator expr

    IS   desplazar e ir al estado 29
    '='  desplazar e ir al estado 32

    asignator  ir al estado 47


Estado 27

   15 initNum: NUM VARNAME . asignator expr

    IS   desplazar e ir al estado 29
    '='  desplazar e ir al estado 32

    asignator  ir al estado 48


Estado 28

   20 initList: LIST NUM . VARNAME @1 asignator numList

    VARNAME  desplazar e ir al estado 49


Estado 29

   17 asignator: IS .

    $default  reduce usando la regla 17 (asignator)


Estado 30

   25 assign: VARNAME OPEN_BRACKET . expr CLOSE_BRACKET asignator expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 50
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 31

   68 function: VARNAME OPEN_PAREN . @13 assignParams $@14 CLOSE_PAREN

    $default  reduce usando la regla 66 (@13)

    @13  ir al estado 51


Estado 32

   18 asignator: '=' .

    $default  reduce usando la regla 18 (asignator)


Estado 33

   24 assign: VARNAME asignator . expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 52
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 34

   35 expr: INT .

    $default  reduce usando la regla 35 (expr)


Estado 35

   36 expr: FLOAT .

    $default  reduce usando la regla 36 (expr)


Estado 36

   34 expr: VARNAME .
   58 listAccess: VARNAME . OPEN_BRACKET expr CLOSE_BRACKET
   68 function: VARNAME . OPEN_PAREN @13 assignParams $@14 CLOSE_PAREN

    OPEN_BRACKET  desplazar e ir al estado 53
    OPEN_PAREN    desplazar e ir al estado 31

    $default  reduce usando la regla 34 (expr)


Estado 37

   37 expr: STRING .

    $default  reduce usando la regla 37 (expr)


Estado 38

   31 expr: OPEN_PAREN . expr CLOSE_PAREN

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 54
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 39

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   42 ifClause: IF expr . negation comparator expr THEN @3 lenguajeP DONE $@4

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59
    NOT         desplazar e ir al estado 60

    $default  reduce usando la regla 44 (negation)

    negation  ir al estado 61


Estado 40

   32 expr: listAccess .

    $default  reduce usando la regla 32 (expr)


Estado 41

   33 expr: function .

    $default  reduce usando la regla 33 (expr)


Estado 42

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   54 fromClause: FROM expr . TO expr @5 DO lenguajeP $@6 DONE

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59
    TO          desplazar e ir al estado 62


Estado 43

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   38 show: SHOW expr .

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    $default  reduce usando la regla 38 (show)


Estado 44

   57 foreachClause: FOREACH VARNAME . IN expr @7 DO lenguajeP $@8 DONE

    IN  desplazar e ir al estado 63


Estado 45

   62 initFunction: FUNC VARNAME . @9 OPEN_PAREN funcParam CLOSE_PAREN $@10 lenguajeP $@11 ENDFUNC

    $default  reduce usando la regla 59 (@9)

    @9  ir al estado 64


Estado 46

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   72 returnClause: RETURN expr .

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    $default  reduce usando la regla 72 (returnClause)


Estado 47

   16 initText: TEXT VARNAME asignator . expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 65
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 48

   15 initNum: NUM VARNAME asignator . expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 66
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 49

   20 initList: LIST NUM VARNAME . @1 asignator numList

    $default  reduce usando la regla 19 (@1)

    @1  ir al estado 67


Estado 50

   25 assign: VARNAME OPEN_BRACKET expr . CLOSE_BRACKET asignator expr
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr

    PLUS           desplazar e ir al estado 55
    MINUS          desplazar e ir al estado 56
    TIMES          desplazar e ir al estado 57
    DIVIDED_BY     desplazar e ir al estado 58
    MOD            desplazar e ir al estado 59
    CLOSE_BRACKET  desplazar e ir al estado 68


Estado 51

   68 function: VARNAME OPEN_PAREN @13 . assignParams $@14 CLOSE_PAREN

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr          ir al estado 69
    listAccess    ir al estado 40
    function      ir al estado 41
    assignParams  ir al estado 70


Estado 52

   24 assign: VARNAME asignator expr .
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    $default  reduce usando la regla 24 (assign)


Estado 53

   58 listAccess: VARNAME OPEN_BRACKET . expr CLOSE_BRACKET

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 71
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 54

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   31     | OPEN_PAREN expr . CLOSE_PAREN

    PLUS         desplazar e ir al estado 55
    MINUS        desplazar e ir al estado 56
    TIMES        desplazar e ir al estado 57
    DIVIDED_BY   desplazar e ir al estado 58
    MOD          desplazar e ir al estado 59
    CLOSE_PAREN  desplazar e ir al estado 72


Estado 55

   26 expr: expr PLUS . expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 73
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 56

   27 expr: expr MINUS . expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 74
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 57

   28 expr: expr TIMES . expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 75
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 58

   29 expr: expr DIVIDED_BY . expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 76
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 59

   30 expr: expr MOD . expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 77
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 60

   43 negation: NOT .

    $default  reduce usando la regla 43 (negation)


Estado 61

   42 ifClause: IF expr negation . comparator expr THEN @3 lenguajeP DONE $@4

    IS          desplazar e ir al estado 78
    GREATER     desplazar e ir al estado 79
    LOWER       desplazar e ir al estado 80
    GEQUALS     desplazar e ir al estado 81
    LEQUALS     desplazar e ir al estado 82
    EQUALS      desplazar e ir al estado 83
    NOT_EQUALS  desplazar e ir al estado 84

    comparator  ir al estado 85


Estado 62

   54 fromClause: FROM expr TO . expr @5 DO lenguajeP $@6 DONE

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 86
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 63

   57 foreachClause: FOREACH VARNAME IN . expr @7 DO lenguajeP $@8 DONE

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 87
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 64

   62 initFunction: FUNC VARNAME @9 . OPEN_PAREN funcParam CLOSE_PAREN $@10 lenguajeP $@11 ENDFUNC

    OPEN_PAREN  desplazar e ir al estado 88


Estado 65

   16 initText: TEXT VARNAME asignator expr .
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    $default  reduce usando la regla 16 (initText)


Estado 66

   15 initNum: NUM VARNAME asignator expr .
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    $default  reduce usando la regla 15 (initNum)


Estado 67

   20 initList: LIST NUM VARNAME @1 . asignator numList

    IS   desplazar e ir al estado 29
    '='  desplazar e ir al estado 32

    asignator  ir al estado 89


Estado 68

   25 assign: VARNAME OPEN_BRACKET expr CLOSE_BRACKET . asignator expr

    IS   desplazar e ir al estado 29
    '='  desplazar e ir al estado 32

    asignator  ir al estado 90


Estado 69

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   70 assignParams: expr . $@15 ',' assignParams
   71             | expr .

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    CLOSE_PAREN  reduce usando la regla 71 (assignParams)
    $default     reduce usando la regla 69 ($@15)

    $@15  ir al estado 91


Estado 70

   68 function: VARNAME OPEN_PAREN @13 assignParams . $@14 CLOSE_PAREN

    $default  reduce usando la regla 67 ($@14)

    $@14  ir al estado 92


Estado 71

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   58 listAccess: VARNAME OPEN_BRACKET expr . CLOSE_BRACKET

    PLUS           desplazar e ir al estado 55
    MINUS          desplazar e ir al estado 56
    TIMES          desplazar e ir al estado 57
    DIVIDED_BY     desplazar e ir al estado 58
    MOD            desplazar e ir al estado 59
    CLOSE_BRACKET  desplazar e ir al estado 93


Estado 72

   31 expr: OPEN_PAREN expr CLOSE_PAREN .

    $default  reduce usando la regla 31 (expr)


Estado 73

   26 expr: expr . PLUS expr
   26     | expr PLUS expr .
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr

    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    $default  reduce usando la regla 26 (expr)


Estado 74

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   27     | expr MINUS expr .
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr

    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    $default  reduce usando la regla 27 (expr)


Estado 75

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   28     | expr TIMES expr .
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr

    $default  reduce usando la regla 28 (expr)


Estado 76

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   29     | expr DIVIDED_BY expr .
   30     | expr . MOD expr

    $default  reduce usando la regla 29 (expr)


Estado 77

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   30     | expr MOD expr .

    $default  reduce usando la regla 30 (expr)


Estado 78

   47 comparator: IS .

    $default  reduce usando la regla 47 (comparator)


Estado 79

   45 comparator: GREATER .

    $default  reduce usando la regla 45 (comparator)


Estado 80

   46 comparator: LOWER .

    $default  reduce usando la regla 46 (comparator)


Estado 81

   48 comparator: GEQUALS .

    $default  reduce usando la regla 48 (comparator)


Estado 82

   49 comparator: LEQUALS .

    $default  reduce usando la regla 49 (comparator)


Estado 83

   50 comparator: EQUALS .

    $default  reduce usando la regla 50 (comparator)


Estado 84

   51 comparator: NOT_EQUALS .

    $default  reduce usando la regla 51 (comparator)


Estado 85

   42 ifClause: IF expr negation comparator . expr THEN @3 lenguajeP DONE $@4

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 94
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 86

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   54 fromClause: FROM expr TO expr . @5 DO lenguajeP $@6 DONE

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    $default  reduce usando la regla 52 (@5)

    @5  ir al estado 95


Estado 87

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   57 foreachClause: FOREACH VARNAME IN expr . @7 DO lenguajeP $@8 DONE

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    $default  reduce usando la regla 55 (@7)

    @7  ir al estado 96


Estado 88

   62 initFunction: FUNC VARNAME @9 OPEN_PAREN . funcParam CLOSE_PAREN $@10 lenguajeP $@11 ENDFUNC

    VARNAME  desplazar e ir al estado 97

    funcParam  ir al estado 98


Estado 89

   20 initList: LIST NUM VARNAME @1 asignator . numList

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    numList     ir al estado 99
    expr        ir al estado 100
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 90

   25 assign: VARNAME OPEN_BRACKET expr CLOSE_BRACKET asignator . expr

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr        ir al estado 101
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 91

   70 assignParams: expr $@15 . ',' assignParams

    ','  desplazar e ir al estado 102


Estado 92

   68 function: VARNAME OPEN_PAREN @13 assignParams $@14 . CLOSE_PAREN

    CLOSE_PAREN  desplazar e ir al estado 103


Estado 93

   58 listAccess: VARNAME OPEN_BRACKET expr CLOSE_BRACKET .

    $default  reduce usando la regla 58 (listAccess)


Estado 94

   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr
   42 ifClause: IF expr negation comparator expr . THEN @3 lenguajeP DONE $@4

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59
    THEN        desplazar e ir al estado 104


Estado 95

   54 fromClause: FROM expr TO expr @5 . DO lenguajeP $@6 DONE

    DO  desplazar e ir al estado 105


Estado 96

   57 foreachClause: FOREACH VARNAME IN expr @7 . DO lenguajeP $@8 DONE

    DO  desplazar e ir al estado 106


Estado 97

   64 funcParam: VARNAME . $@12 ',' funcParam
   65          | VARNAME .

    CLOSE_PAREN  reduce usando la regla 65 (funcParam)
    $default     reduce usando la regla 63 ($@12)

    $@12  ir al estado 107


Estado 98

   62 initFunction: FUNC VARNAME @9 OPEN_PAREN funcParam . CLOSE_PAREN $@10 lenguajeP $@11 ENDFUNC

    CLOSE_PAREN  desplazar e ir al estado 108


Estado 99

   20 initList: LIST NUM VARNAME @1 asignator numList .

    $default  reduce usando la regla 20 (initList)


Estado 100

   22 numList: expr . $@2 ',' numList
   23        | expr .
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    ','       reduce usando la regla 21 ($@2)
    $default  reduce usando la regla 23 (numList)

    $@2  ir al estado 109


Estado 101

   25 assign: VARNAME OPEN_BRACKET expr CLOSE_BRACKET asignator expr .
   26 expr: expr . PLUS expr
   27     | expr . MINUS expr
   28     | expr . TIMES expr
   29     | expr . DIVIDED_BY expr
   30     | expr . MOD expr

    PLUS        desplazar e ir al estado 55
    MINUS       desplazar e ir al estado 56
    TIMES       desplazar e ir al estado 57
    DIVIDED_BY  desplazar e ir al estado 58
    MOD         desplazar e ir al estado 59

    $default  reduce usando la regla 25 (assign)


Estado 102

   70 assignParams: expr $@15 ',' . assignParams

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    expr          ir al estado 69
    listAccess    ir al estado 40
    function      ir al estado 41
    assignParams  ir al estado 110


Estado 103

   68 function: VARNAME OPEN_PAREN @13 assignParams $@14 CLOSE_PAREN .

    $default  reduce usando la regla 68 (function)


Estado 104

   42 ifClause: IF expr negation comparator expr THEN . @3 lenguajeP DONE $@4

    $default  reduce usando la regla 40 (@3)

    @3  ir al estado 111


Estado 105

   54 fromClause: FROM expr TO expr @5 DO . lenguajeP $@6 DONE

    $default  reduce usando la regla 2 (lenguajeP)

    lenguajeP  ir al estado 112


Estado 106

   57 foreachClause: FOREACH VARNAME IN expr @7 DO . lenguajeP $@8 DONE

    $default  reduce usando la regla 2 (lenguajeP)

    lenguajeP  ir al estado 113


Estado 107

   64 funcParam: VARNAME $@12 . ',' funcParam

    ','  desplazar e ir al estado 114


Estado 108

   62 initFunction: FUNC VARNAME @9 OPEN_PAREN funcParam CLOSE_PAREN . $@10 lenguajeP $@11 ENDFUNC

    $default  reduce usando la regla 60 ($@10)

    $@10  ir al estado 115


Estado 109

   22 numList: expr $@2 . ',' numList

    ','  desplazar e ir al estado 116


Estado 110

   70 assignParams: expr $@15 ',' assignParams .

    $default  reduce usando la regla 70 (assignParams)


Estado 111

   42 ifClause: IF expr negation comparator expr THEN @3 . lenguajeP DONE $@4

    $default  reduce usando la regla 2 (lenguajeP)

    lenguajeP  ir al estado 117


Estado 112

    1 lenguajeP: lenguajeP . line
   54 fromClause: FROM expr TO expr @5 DO lenguajeP . $@6 DONE

    TEXT     desplazar e ir al estado 3
    NUM      desplazar e ir al estado 4
    LIST     desplazar e ir al estado 5
    VARNAME  desplazar e ir al estado 6
    IF       desplazar e ir al estado 7
    FROM     desplazar e ir al estado 8
    SHOW     desplazar e ir al estado 9
    FOREACH  desplazar e ir al estado 10
    FUNC     desplazar e ir al estado 11
    RETURN   desplazar e ir al estado 12

    $default  reduce usando la regla 53 ($@6)

    line           ir al estado 13
    init           ir al estado 14
    initNum        ir al estado 15
    initText       ir al estado 16
    initList       ir al estado 17
    assign         ir al estado 18
    show           ir al estado 19
    ifClause       ir al estado 20
    fromClause     ir al estado 21
    $@6            ir al estado 118
    foreachClause  ir al estado 22
    initFunction   ir al estado 23
    function       ir al estado 24
    returnClause   ir al estado 25


Estado 113

    1 lenguajeP: lenguajeP . line
   57 foreachClause: FOREACH VARNAME IN expr @7 DO lenguajeP . $@8 DONE

    TEXT     desplazar e ir al estado 3
    NUM      desplazar e ir al estado 4
    LIST     desplazar e ir al estado 5
    VARNAME  desplazar e ir al estado 6
    IF       desplazar e ir al estado 7
    FROM     desplazar e ir al estado 8
    SHOW     desplazar e ir al estado 9
    FOREACH  desplazar e ir al estado 10
    FUNC     desplazar e ir al estado 11
    RETURN   desplazar e ir al estado 12

    $default  reduce usando la regla 56 ($@8)

    line           ir al estado 13
    init           ir al estado 14
    initNum        ir al estado 15
    initText       ir al estado 16
    initList       ir al estado 17
    assign         ir al estado 18
    show           ir al estado 19
    ifClause       ir al estado 20
    fromClause     ir al estado 21
    foreachClause  ir al estado 22
    $@8            ir al estado 119
    initFunction   ir al estado 23
    function       ir al estado 24
    returnClause   ir al estado 25


Estado 114

   64 funcParam: VARNAME $@12 ',' . funcParam

    VARNAME  desplazar e ir al estado 97

    funcParam  ir al estado 120


Estado 115

   62 initFunction: FUNC VARNAME @9 OPEN_PAREN funcParam CLOSE_PAREN $@10 . lenguajeP $@11 ENDFUNC

    $default  reduce usando la regla 2 (lenguajeP)

    lenguajeP  ir al estado 121


Estado 116

   22 numList: expr $@2 ',' . numList

    INT         desplazar e ir al estado 34
    FLOAT       desplazar e ir al estado 35
    VARNAME     desplazar e ir al estado 36
    STRING      desplazar e ir al estado 37
    OPEN_PAREN  desplazar e ir al estado 38

    numList     ir al estado 122
    expr        ir al estado 100
    listAccess  ir al estado 40
    function    ir al estado 41


Estado 117

    1 lenguajeP: lenguajeP . line
   42 ifClause: IF expr negation comparator expr THEN @3 lenguajeP . DONE $@4

    TEXT     desplazar e ir al estado 3
    NUM      desplazar e ir al estado 4
    LIST     desplazar e ir al estado 5
    VARNAME  desplazar e ir al estado 6
    IF       desplazar e ir al estado 7
    FROM     desplazar e ir al estado 8
    DONE     desplazar e ir al estado 123
    SHOW     desplazar e ir al estado 9
    FOREACH  desplazar e ir al estado 10
    FUNC     desplazar e ir al estado 11
    RETURN   desplazar e ir al estado 12

    line           ir al estado 13
    init           ir al estado 14
    initNum        ir al estado 15
    initText       ir al estado 16
    initList       ir al estado 17
    assign         ir al estado 18
    show           ir al estado 19
    ifClause       ir al estado 20
    fromClause     ir al estado 21
    foreachClause  ir al estado 22
    initFunction   ir al estado 23
    function       ir al estado 24
    returnClause   ir al estado 25


Estado 118

   54 fromClause: FROM expr TO expr @5 DO lenguajeP $@6 . DONE

    DONE  desplazar e ir al estado 124


Estado 119

   57 foreachClause: FOREACH VARNAME IN expr @7 DO lenguajeP $@8 . DONE

    DONE  desplazar e ir al estado 125


Estado 120

   64 funcParam: VARNAME $@12 ',' funcParam .

    $default  reduce usando la regla 64 (funcParam)


Estado 121

    1 lenguajeP: lenguajeP . line
   62 initFunction: FUNC VARNAME @9 OPEN_PAREN funcParam CLOSE_PAREN $@10 lenguajeP . $@11 ENDFUNC

    TEXT     desplazar e ir al estado 3
    NUM      desplazar e ir al estado 4
    LIST     desplazar e ir al estado 5
    VARNAME  desplazar e ir al estado 6
    IF       desplazar e ir al estado 7
    FROM     desplazar e ir al estado 8
    SHOW     desplazar e ir al estado 9
    FOREACH  desplazar e ir al estado 10
    FUNC     desplazar e ir al estado 11
    RETURN   desplazar e ir al estado 12

    $default  reduce usando la regla 61 ($@11)

    line           ir al estado 13
    init           ir al estado 14
    initNum        ir al estado 15
    initText       ir al estado 16
    initList       ir al estado 17
    assign         ir al estado 18
    show           ir al estado 19
    ifClause       ir al estado 20
    fromClause     ir al estado 21
    foreachClause  ir al estado 22
    initFunction   ir al estado 23
    $@11           ir al estado 126
    function       ir al estado 24
    returnClause   ir al estado 25


Estado 122

   22 numList: expr $@2 ',' numList .

    $default  reduce usando la regla 22 (numList)


Estado 123

   42 ifClause: IF expr negation comparator expr THEN @3 lenguajeP DONE . $@4

    $default  reduce usando la regla 41 ($@4)

    $@4  ir al estado 127


Estado 124

   54 fromClause: FROM expr TO expr @5 DO lenguajeP $@6 DONE .

    $default  reduce usando la regla 54 (fromClause)


Estado 125

   57 foreachClause: FOREACH VARNAME IN expr @7 DO lenguajeP $@8 DONE .

    $default  reduce usando la regla 57 (foreachClause)


Estado 126

   62 initFunction: FUNC VARNAME @9 OPEN_PAREN funcParam CLOSE_PAREN $@10 lenguajeP $@11 . ENDFUNC

    ENDFUNC  desplazar e ir al estado 128


Estado 127

   42 ifClause: IF expr negation comparator expr THEN @3 lenguajeP DONE $@4 .

    $default  reduce usando la regla 42 (ifClause)


Estado 128

   62 initFunction: FUNC VARNAME @9 OPEN_PAREN funcParam CLOSE_PAREN $@10 lenguajeP $@11 ENDFUNC .

    $default  reduce usando la regla 62 (initFunction)
